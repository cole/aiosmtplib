version: 2.1

orbs:
  codecov: codecov/codecov@3.3.0

executors:
  default: &executor
    docker:
      - image: "python:3.10-bookworm"
        auth: &docker-auth
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
    environment:
      PIP_CACHE_DIR: ~/caches/pip
      POETRY_HOME: ~/poetry
      POETRY_CACHE_DIR: ~/caches/poetry
      POETRY_VIRTUALENVS_PATH: ~/caches/poetry/virtualenvs
      POETRY_VIRTUALENVS_IN_PROJECT: "false"
      POETRY_INSTALLER_PARALLEL: "false"
  py38:
    <<: *executor
    docker:
      - image: "python:3.8-bookworm"
        auth: *docker-auth
  py39:
    <<: *executor
    docker:
      - image: "python:3.9-bookworm"
        auth: *docker-auth
  py310:
    <<: *executor
    docker:
      - image: "python:3.10-bookworm"
        auth: *docker-auth
  py311:
    <<: *executor
    docker:
      - image: "python:3.11-bookworm"
        auth: *docker-auth
  py312:
    <<: *executor
    docker:
      - image: "python:3.12-bookworm"
        auth: *docker-auth
  pypy39:
    <<: *executor
    docker:
      - image: "pypy:3.9-bookworm"
        auth: *docker-auth
  pypy310:
    <<: *executor
    docker:
      - image: "pypy:3.10-bookworm"
        auth: *docker-auth

commands:
  using_poetry:
    parameters:
      steps:
        type: steps
        default: []
      cache_key:
        type: string
        default: ""
    description: "Wraps the steps given with a poetry cache"
    steps:
      - run: python -V
      - restore_cache:
          keys:
            - poetry-v12-<<parameters.cache_key>>-{{ checksum "pyproject.toml" }}
            - poetry-v12-<<parameters.cache_key>>-
      - run: mkdir -p $POETRY_CACHE_DIR
      - run: mkdir -p $POETRY_VIRTUALENVS_PATH
      - run: mkdir -p $PIP_CACHE_DIR
      - run: $POETRY_HOME/bin/poetry -V
      - run: $POETRY_HOME/bin/poetry config --list
      - steps: <<parameters.steps>>
      - save_cache:
          key: poetry-v12-<<parameters.cache_key>>-{{ checksum "pyproject.toml" }}
          paths:
            - ~/caches/poetry
            - poetry.lock
  using_pip_cache:
    description: "Execute with pip caching"
    parameters:
      steps:
        type: steps
        default: []
    steps:
      - restore_cache:
          keys:
            - pip-v4-{{ .Environment.CIRCLE_JOB }}-
      - run: mkdir -p $PIP_CACHE_DIR
      - steps: <<parameters.steps>>
      - save_cache:
          key: pip-v4-{{ .Environment.CIRCLE_JOB }}-
          paths:
            - ~/caches/pip
  using_venv:
    description: "Execute in a cached venv"
    parameters:
      steps:
        type: steps
        default: []
    steps:
      - using_pip_cache:
          steps:
            - restore_cache:
                keys:
                  - venv-v1-{{ .Environment.CIRCLE_JOB }}-
            - run: python3 -m venv venv
            - run: . venv/bin/activate
            - run: pip install --upgrade pip
            - steps: <<parameters.steps>>
            - save_cache:
                key: venv-v1-{{ .Environment.CIRCLE_JOB }}-
                paths:
                  - "venv"
  using_hypothesis_cache:
    description: "Caching for hypothesis DB"
    parameters:
      steps:
        type: steps
        default: []
      cache_key:
        type: string
    steps:
      - restore_cache:
          keys:
            - "hypothesis-v6-<<parameters.cache_key>>"
      - steps: <<parameters.steps>>
      - save_cache:
          key: "hypothesis-v6-<<parameters.cache_key>>"
          paths:
            - ~/project/.hypothesis
  install_poetry:
    description: "Install poetry"
    steps:
      - run: python3 -m venv $POETRY_HOME
      - run: $POETRY_HOME/bin/pip install --upgrade pip
      - run: $POETRY_HOME/bin/pip install poetry==1.3.1
  test:
    description: "Run tests"
    parameters:
      event_loop:
        type: enum
        description: "event loop type"
        enum: ["asyncio", "uvloop"]
      python_version:
        type: string
    steps:
      - using_poetry:
          cache_key: "test-<<parameters.event_loop>>-<<parameters.python_version>>-v2"
          steps:
            - when:
                condition:
                  equal: ["uvloop", <<parameters.event_loop>>]
                steps:
                  - run: $POETRY_HOME/bin/poetry install --no-interaction --no-ansi -E uvloop --with test
            - unless:
                condition:
                  equal: ["uvloop", <<parameters.event_loop>>]
                steps:
                  - run: $POETRY_HOME/bin/poetry install --no-interaction --no-ansi --with test
            - run: |
                $POETRY_HOME/bin/poetry run pytest --cov --cov-report= \
                  --cov-config=pyproject.toml \
                  --junitxml=test-results/$CIRCLE_JOB/results.xml \
                  --event-loop=<<parameters.event_loop>> \
                  --bind-addr=$BIND_ADDR \
                  --hypothesis-profile $HYPOTHESIS_PROFILE
      - store_artifacts:
          path: test-results
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: coverage-results
          paths:
            - .coverage.*

jobs:
  typecheck:
    executor: default
    steps:
      - checkout
      - using_venv:
          steps:
            - run: pip install mypy
            - run: mypy aiosmtplib
  security:
    executor: default
    steps:
      - checkout
      - using_venv:
          steps:
            - run: pip install bandit
            - run: bandit -n 10 -x tests -r aiosmtplib
      # TODO: move off of poetry
      - using_pip_cache:
          steps:
            - install_poetry
            - using_poetry:
                cache_key: "security-v3"
                steps:
                  - run: $POETRY_HOME/bin/poetry install --no-interaction --no-ansi -E uvloop -E docs --with test,typecheck,security
                  - run: $POETRY_HOME/bin/poetry export --with test -E docs -E uvloop  -f requirements.txt --without-hashes | $POETRY_HOME/bin/poetry run safety check --stdin

  build:
    executor: default
    steps:
      - checkout
      - using_pip_cache:
          steps:
            - install_poetry
            - run: $POETRY_HOME/bin/poetry check
            - run: $POETRY_HOME/bin/poetry build -vv
            - persist_to_workspace:
                root: dist
                paths:
                  - aiosmtplib-*.tar.gz
                  - aiosmtplib-*.whl
            - store_artifacts:
                path: dist/
  docs:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - using_pip_cache:
          steps:
            - install_poetry
            - using_poetry:
                cache_key: "docs-v2"
                steps:
                  - run: $POETRY_HOME/bin/poetry install --no-interaction --no-ansi -E docs --with test
                  - run: $POETRY_HOME/bin/poetry run sphinx-build -nWT -b doctest -d ./docs/build/doctrees ./docs ./docs/build/html
                  - run: $POETRY_HOME/bin/poetry run sphinx-build -nWT -b dummy -d ./docs/build/doctrees ./docs ./docs/build/html

  test:
    executor: <<parameters.python_version>>
    parameters:
      python_version:
        type: enum
        description: "executor name"
        enum: ["py38", "py39", "py310", "py311", "py312", "pypy39", "pypy310"]
      event_loop:
        type: enum
        description: "event loop type"
        enum: ["asyncio", "uvloop"]
    environment:
      COVERAGE_FILE: "coverage-results/.coverage.<<parameters.python_version>>-<<parameters.event_loop>>"
      HYPOTHESIS_PROFILE: "ci"
      BIND_ADDR: "127.0.0.1"
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - using_pip_cache:
          steps:
            - install_poetry
            - using_hypothesis_cache:
                cache_key: <<parameters.python_version>>
                steps:
                  - test:
                      python_version: <<parameters.python_version>>
                      event_loop: <<parameters.event_loop>>

  coverage:
    executor: py311
    environment:
      COVERAGE_FILE: .coverage
    steps:
      - checkout
      - attach_workspace:
          at: coverage-results
      - using_pip_cache:
          steps:
            - install_poetry
            - run: cp coverage-results/.coverage.* ./
            - using_poetry:
                cache_key: "coverage-v2"
                steps:
                  - run: $POETRY_HOME/bin/poetry install --no-interaction --no-ansi --with test
                  - run: $POETRY_HOME/bin/poetry run coverage combine
                  - run: $POETRY_HOME/bin/poetry run coverage xml
                  - run: $POETRY_HOME/bin/poetry run coverage html
                  - store_artifacts:
                      path: coverage.xml
                  - store_artifacts:
                      path: htmlcov
                  - codecov/upload:
                      file: coverage.xml
                  - run: $POETRY_HOME/bin/poetry run coverage report --fail-under=90

  deploy:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - using_pip_cache:
          steps:
            - install_poetry
            - run: $POETRY_HOME/bin/poetry config repositories.testpypi https://test.pypi.org/legacy/
            - run: $POETRY_HOME/bin/poetry publish -vv --repository testpypi --username $TESTPYPI_USERNAME --password $TESTPYPI_PASSWORD
            - run: $POETRY_HOME/bin/poetry publish -vv --username $PYPI_USERNAME --password $PYPI_PASSWORD

workflows:
  static_checks:
    jobs:
      - typecheck: &base-job
          context:
            - docker-hub-credentials
          filters:
            tags:
              only: /.*/
      - security: *base-job
  build_test_deploy:
    jobs:
      - build: *base-job
      - docs:
          <<: *base-job
          requires: &phase1
            - build
      - test:
          <<: *base-job
          name: "test-asyncio-<< matrix.python_version >>"
          matrix:
            alias: "test-cpython-asyncio"
            parameters:
              event_loop: ["asyncio"]
              python_version: ["py38", "py39", "py310", "py311", "py312"]
          requires: *phase1
      - test:
          <<: *base-job
          name: "test-pypy-<< matrix.python_version >>"
          matrix:
            alias: "test-pypy-asyncio"
            parameters:
              event_loop: ["asyncio"]
              python_version: ["pypy39", "pypy310"]
          requires: *phase1
      - test:
          <<: *base-job
          name: "test-uvloop-<< matrix.python_version >>"
          matrix:
            alias: "test-cpython-uvloop"
            parameters:
              event_loop: ["uvloop"]
              python_version: ["py38", "py39", "py310", "py311", "py312"]
          requires:
            - "test-asyncio-<< matrix.python_version >>"
      - coverage:
          <<: *base-job
          requires: &phase3
            - build
            - docs
            - test-cpython-asyncio
            - test-cpython-uvloop
            - test-pypy-asyncio
      - deploy:
          requires: *phase3
          context:
            - docker-hub-credentials
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
# VS Code Extension Version: 1.5.1
