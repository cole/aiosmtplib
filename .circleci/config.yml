version: 2.1

orbs:
  codecov: codecov/codecov@4.1.0

executors:
  docker_executor:
    parameters:
      base_image:
        default: "python"
        type: enum
        enum: ["python", "pypy"]
      version:
        default: "3.11"
        type: enum
        enum: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    docker:
      - image: "<<parameters.base_image>>:<<parameters.version>>-bookworm"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
    environment:
      FORCE_COLOR: "1"
      PIP_CACHE_DIR: ~/caches/pip
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_ROOT_USER_ACTION: "ignore"

commands:
  using_venv:
    description: "Setup and install in a venv, with caching"
    parameters:
      steps:
        type: steps
        default: []
      python_version:
        type: string
      cache_key:
        type: string
      download_command_args:
        type: string
        default: ""
      install_command_args:
        type: string
        default: ""
    steps:
      - restore_cache:
          keys:
            - venv-v5-<<parameters.python_version>>-<<parameters.cache_key>>-{{ checksum "pyproject.toml" }}
            - venv-v5-<<parameters.python_version>>-<<parameters.cache_key>>-
            - venv-v5-<<parameters.python_version>>-
      - run: mkdir -p $PIP_CACHE_DIR
      - run: python -m venv venv
      - run: . venv/bin/activate
      - run: python -m pip download <<parameters.download_command_args>>
      - run: python -m pip install <<parameters.install_command_args>>
      - steps: <<parameters.steps>>
      - save_cache:
          key: venv-v5-<<parameters.python_version>>-<<parameters.cache_key>>-{{ checksum "pyproject.toml" }}
          paths:
            - "venv"
            - "deps"
            - ~/caches/pip
  using_venv_packages:
    description: "Venv with specific packages"
    parameters:
      steps:
        type: steps
        default: []
      python_version:
        type: string
      packages:
        type: string
        default: ""
        description: "PyPI package names, space delimited"
    steps:
      - using_venv:
          steps: <<parameters.steps>>
          cache_key: packages-<<parameters.packages>>
          python_version: <<parameters.python_version>>
          download_command_args: --dest deps/ <<parameters.packages>>
          install_command_args: --no-index --find-links=deps/ <<parameters.packages>>
  using_venv_extras:
    description: "Venv with an optional-dependencies group"
    parameters:
      steps:
        type: steps
        default: []
      python_version:
        type: string
      package_extras:
        type: string
        default: ""
    steps:
      - using_venv:
          steps: <<parameters.steps>>
          cache_key: extras-<<parameters.package_extras>>
          python_version: <<parameters.python_version>>
          download_command_args: --dest deps/ .[<<parameters.package_extras>>]
          install_command_args: --no-index --find-links=deps/ --find-links=dist/ aiosmtplib[<<parameters.package_extras>>]

jobs:
  build:
    executor:
      name: docker_executor
      version: "3.11"
    steps:
      - checkout
      - using_venv_packages:
          python_version: python3.11
          packages: build
          steps:
            - run: python -m build .
            - persist_to_workspace:
                root: dist
                paths:
                  - aiosmtplib-*.tar.gz
                  - aiosmtplib-*.whl
            - store_artifacts:
                path: dist/

  wheelcheck:
    executor:
      name: docker_executor
      version: "3.11"
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - using_venv_packages:
          packages: check-wheel-contents
          python_version: python3.11
          steps:
            - run: python3 -m check-wheel-contents ./dist/*.whl

  typecheck:
    executor:
      name: docker_executor
      version: "3.11"
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - using_venv_packages:
          packages: mypy
          python_version: python3.11
          steps:
            - run: python -m mypy src/aiosmtplib
  security:
    executor:
      name: docker_executor
      version: "3.11"
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - using_venv_packages:
          packages: bandit
          python_version: python3.11
          steps:
            - run: python -m bandit -n 10 -x tests -r src/aiosmtplib

  docs:
    executor:
      name: docker_executor
      version: "3.11"
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - using_venv_extras:
          package_extras: docs,tests
          python_version: python3.11
          steps:
            - run: python -m sphinx -nWT -b doctest -d ./docs/build/doctrees ./docs ./docs/build/html
            - run: python -m sphinx -nWT -b dummy -d ./docs/build/doctrees ./docs ./docs/build/html

  test:
    executor:
      name: docker_executor
      base_image: <<parameters.base_image>>
      version: <<parameters.python_version>>
    parameters:
      base_image:
        type: enum
        enum: ["python", "pypy"]
      python_version:
        type: enum
        description: "python version"
        enum: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      event_loop:
        type: enum
        description: "event loop type"
        enum: ["asyncio", "uvloop"]
    environment:
      COVERAGE_FILE: "coverage-results/.coverage.<<parameters.base_image>><<parameters.python_version>>-<<parameters.event_loop>>"
      HYPOTHESIS_PROFILE: "ci"
      BIND_ADDR: "127.0.0.1"
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - restore_cache:
          keys:
            - "hypothesis-v7-<<parameters.python_version>>"
      # TODO: this is a pretty clunky way of selecting uvloop
      - when:
          condition:
            equal: ["uvloop", <<parameters.event_loop>>]
          steps:
            - using_venv_extras:
                python_version: "<<parameters.base_image>><<parameters.python_version>>"
                package_extras: "tests,uvloop"
                steps:
                  - run: |
                      python -m pytest --cov --cov-report= \
                        --cov-config=pyproject.toml \
                        --junitxml=test-results/$CIRCLE_JOB/results.xml \
                        --event-loop=<<parameters.event_loop>> \
                        --bind-addr=$BIND_ADDR \
                        --hypothesis-profile $HYPOTHESIS_PROFILE
      - unless:
          condition:
            equal: ["uvloop", <<parameters.event_loop>>]
          steps:
            - using_venv_extras:
                python_version: "<<parameters.base_image>><<parameters.python_version>>"
                package_extras: "tests"
                steps:
                  - run: |
                      python -m pytest --cov --cov-report= \
                        --cov-config=pyproject.toml \
                        --junitxml=test-results/$CIRCLE_JOB/results.xml \
                        --event-loop=<<parameters.event_loop>> \
                        --bind-addr=$BIND_ADDR \
                        --hypothesis-profile $HYPOTHESIS_PROFILE
      - store_artifacts:
          path: test-results
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: coverage-results
          paths:
            - .coverage.*
      - save_cache:
          key: "hypothesis-v7-<<parameters.python_version>>"
          paths:
            - .hypothesis
  coverage:
    executor:
      name: docker_executor
      version: "3.11"
    environment:
      COVERAGE_FILE: .coverage
    steps:
      - checkout
      - attach_workspace:
          at: coverage-results
      - run: cp coverage-results/.coverage.* ./
      - attach_workspace:
          at: dist
      - using_venv_packages:
          python_version: python3.11
          packages: coverage[toml]
          steps:
            - run: python -m coverage combine
            - run: python -m coverage xml
            - run: python -m coverage html
            - run: python -m coverage report --fail-under=90
      - store_artifacts:
          path: coverage.xml
      - store_artifacts:
          path: htmlcov
      - codecov/upload:
          file: coverage.xml

  deploy:
    executor:
      name: docker_executor
      version: "3.11"
    steps:
      - checkout
      - attach_workspace:
          at: dist
      # - using_pip_cache:
      #     steps:
      #       - install_poetry
      #       - run: $POETRY_HOME/bin/poetry config repositories.testpypi https://test.pypi.org/legacy/
      #       - run: $POETRY_HOME/bin/poetry publish -vv --repository testpypi --username $TESTPYPI_USERNAME --password $TESTPYPI_PASSWORD
      #       - run: $POETRY_HOME/bin/poetry publish -vv --username $PYPI_USERNAME --password $PYPI_PASSWORD

workflows:
  build_test_deploy:
    jobs:
      - build: &base-job
          context:
            - docker-hub-credentials
          filters:
            tags:
              only: /.*/
      - typecheck:
          <<: *base-job
          requires: &build
            - build
      - wheelcheck:
          <<: *base-job
          requires: *build
      - security:
          <<: *base-job
          requires: *build
      - docs:
          <<: *base-job
          requires: *build
      - test:
          <<: *base-job
          name: "test-asyncio-<< matrix.python_version >>"
          matrix:
            alias: "test-cpython-asyncio"
            parameters:
              event_loop: ["asyncio"]
              base_image: ["python"]
              python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
          requires: *build
      - test:
          <<: *base-job
          name: "test-pypy-<< matrix.python_version >>"
          matrix:
            alias: "test-pypy-asyncio"
            parameters:
              event_loop: ["asyncio"]
              base_image: ["pypy"]
              python_version: ["3.9", "3.10"]
          requires: *build
      - test:
          <<: *base-job
          name: "test-uvloop-<< matrix.python_version >>"
          matrix:
            alias: "test-cpython-uvloop"
            parameters:
              event_loop: ["uvloop"]
              base_image: ["python"]
              python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
          requires:
            - "test-asyncio-<< matrix.python_version >>"
      - coverage:
          <<: *base-job
          requires: &tests
            - test-cpython-asyncio
            - test-cpython-uvloop
            - test-pypy-asyncio
      - deploy:
          requires:
            - build
            - typecheck
            - wheelcheck
            - security
            - docs
            - test-cpython-asyncio
            - test-cpython-uvloop
            - test-pypy-asyncio
          context:
            - docker-hub-credentials
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
# VS Code Extension Version: 1.5.1
