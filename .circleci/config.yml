version: 2.1

orbs:
  codecov: codecov/codecov@3.3.0

executors:
  default: &executor
    docker:
      - image: "python:3.10-bookworm"
        auth: &docker-auth
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
    environment:
      FORCE_COLOR: "1"
      PIP_CACHE_DIR: ~/caches/pip
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_ROOT_USER_ACTION: "ignore"
  py38:
    <<: *executor
    docker:
      - image: "python:3.8-bookworm"
        auth: *docker-auth
  py39:
    <<: *executor
    docker:
      - image: "python:3.9-bookworm"
        auth: *docker-auth
  py310:
    <<: *executor
    docker:
      - image: "python:3.10-bookworm"
        auth: *docker-auth
  py311:
    <<: *executor
    docker:
      - image: "python:3.11-bookworm"
        auth: *docker-auth
  py312:
    <<: *executor
    docker:
      - image: "python:3.12-bookworm"
        auth: *docker-auth
  pypy39:
    <<: *executor
    docker:
      - image: "pypy:3.9-bookworm"
        auth: *docker-auth
  pypy310:
    <<: *executor
    docker:
      - image: "pypy:3.10-bookworm"
        auth: *docker-auth

commands:
  using_venv:
    description: "Setup and install in a venv, with caching"
    parameters:
      steps:
        type: steps
        default: []
      python_version:
        type: string
      package_extras:
        type: string
        default: ""
      install:
        type: boolean
        default: true
    steps:
      - restore_cache:
          keys:
            - venv-v4-<<parameters.python_version>>-extras:<<parameters.package_extras>>-{{ checksum "pyproject.toml" }}
            - venv-v4-<<parameters.python_version>>-extras:<<parameters.package_extras>>-
            - venv-v4-<<parameters.python_version>>-
      - run: mkdir -p $PIP_CACHE_DIR
      - run: python -m venv venv
      - run: . venv/bin/activate
      - when:
          condition:
            equal: [true, <<parameters.install>>]
          steps:
            - run: DISTWHEEL=(dist/*.whl)
            - run: python -m pip install "${DISTWHEEL}[<<parameters.package_extras>>]"
      - steps: <<parameters.steps>>
      - save_cache:
          key: venv-v4-<<parameters.python_version>>-extras:<<parameters.package_extras>>-{{ checksum "pyproject.toml" }}
          paths:
            - "venv"
            - ~/caches/pip

jobs:
  build:
    executor: default
    steps:
      - checkout
      - using_venv:
          python_version: py310
          install: false
          steps:
            - run: python -m pip install build
            - run: python -m build .
            - persist_to_workspace:
                root: dist
                paths:
                  - aiosmtplib-*.tar.gz
                  - aiosmtplib-*.whl
            - store_artifacts:
                path: dist/

  typecheck:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - using_venv:
          package_extras: typing
          python_version: py310
          steps:
            - run: python -m mypy src/aiosmtplib
  security:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - using_venv:
          # all extras for safety check
          package_extras: uvloop,docs,tests,typing,security
          python_version: py310
          steps:
            - run: python -m bandit -n 10 -x tests -r src/aiosmtplib
            - run: python -m safety check

  docs:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - using_venv:
          package_extras: docs
          python_version: py310
          steps:
            - run: python -m sphinx -nWT -b doctest -d ./docs/build/doctrees ./docs ./docs/build/html
            - run: python -m sphinx -nWT -b dummy -d ./docs/build/doctrees ./docs ./docs/build/html

  test:
    executor: <<parameters.python_version>>
    parameters:
      python_version:
        type: enum
        description: "executor name"
        enum: ["py38", "py39", "py310", "py311", "py312", "pypy39", "pypy310"]
      event_loop:
        type: enum
        description: "event loop type"
        enum: ["asyncio", "uvloop"]
    environment:
      COVERAGE_FILE: "coverage-results/.coverage.<<parameters.python_version>>-<<parameters.event_loop>>"
      HYPOTHESIS_PROFILE: "ci"
      BIND_ADDR: "127.0.0.1"
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - restore_cache:
          keys:
            - "hypothesis-v7-<<parameters.python_version>>"
      - using_venv:
          python_version: "<<parameters.python_version>>"
          package_extras: "tests,<<parameters.event_loop>>"
          steps:
            - run: |
                python -m pytest --cov --cov-report= \
                  --cov-config=pyproject.toml \
                  --junitxml=test-results/$CIRCLE_JOB/results.xml \
                  --event-loop=<<parameters.event_loop>> \
                  --bind-addr=$BIND_ADDR \
                  --hypothesis-profile $HYPOTHESIS_PROFILE
      - store_artifacts:
          path: test-results
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: coverage-results
          paths:
            - .coverage.*
      - save_cache:
          key: "hypothesis-v7-<<parameters.python_version>>"
          paths:
            - .hypothesis
  coverage:
    executor: default
    environment:
      COVERAGE_FILE: .coverage
    steps:
      - checkout
      - attach_workspace:
          at: coverage-results
      # - using_pip_cache:
      #     steps:
      #       - install_poetry
      #       - run: cp coverage-results/.coverage.* ./
      #       - using_poetry:
      #           cache_key: "coverage-v2"
      #           steps:
      #             - run: $POETRY_HOME/bin/poetry install --no-interaction --no-ansi --with test
      #             - run: $POETRY_HOME/bin/poetry run coverage combine
      #             - run: $POETRY_HOME/bin/poetry run coverage xml
      #             - run: $POETRY_HOME/bin/poetry run coverage html
      #             - store_artifacts:
      #                 path: coverage.xml
      #             - store_artifacts:
      #                 path: htmlcov
      #             - codecov/upload:
      #                 file: coverage.xml
      #             - run: $POETRY_HOME/bin/poetry run coverage report --fail-under=90

  deploy:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: dist
      # - using_pip_cache:
      #     steps:
      #       - install_poetry
      #       - run: $POETRY_HOME/bin/poetry config repositories.testpypi https://test.pypi.org/legacy/
      #       - run: $POETRY_HOME/bin/poetry publish -vv --repository testpypi --username $TESTPYPI_USERNAME --password $TESTPYPI_PASSWORD
      #       - run: $POETRY_HOME/bin/poetry publish -vv --username $PYPI_USERNAME --password $PYPI_PASSWORD

workflows:
  build_test_deploy:
    jobs:
      - build: &base-job
          context:
            - docker-hub-credentials
          filters:
            tags:
              only: /.*/
      - typecheck:
          <<: *base-job
          requires: &build
            - build
      - security:
          <<: *base-job
          requires: *build
      - docs:
          <<: *base-job
          requires: *build
      - test:
          <<: *base-job
          name: "test-asyncio-<< matrix.python_version >>"
          matrix:
            alias: "test-cpython-asyncio"
            parameters:
              event_loop: ["asyncio"]
              python_version: ["py38", "py39", "py310", "py311", "py312"]
          requires: *build
      - test:
          <<: *base-job
          name: "test-pypy-<< matrix.python_version >>"
          matrix:
            alias: "test-pypy-asyncio"
            parameters:
              event_loop: ["asyncio"]
              python_version: ["pypy39", "pypy310"]
          requires: *build
      - test:
          <<: *base-job
          name: "test-uvloop-<< matrix.python_version >>"
          matrix:
            alias: "test-cpython-uvloop"
            parameters:
              event_loop: ["uvloop"]
              python_version: ["py38", "py39", "py310", "py311", "py312"]
          requires:
            - "test-asyncio-<< matrix.python_version >>"
      - coverage:
          <<: *base-job
          requires: &tests
            - test-cpython-asyncio
            - test-cpython-uvloop
            - test-pypy-asyncio
      - deploy:
          requires:
            - build
            - typecheck
            - security
            - docs
            - test-cpython-asyncio
            - test-cpython-uvloop
            - test-pypy-asyncio
          context:
            - docker-hub-credentials
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
# VS Code Extension Version: 1.5.1
